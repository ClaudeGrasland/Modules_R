[
  {
    "objectID": "data.html#i.-afrique-data",
    "href": "data.html#i.-afrique-data",
    "title": "Données",
    "section": "I. Afrique data",
    "text": "I. Afrique data\nPrésentation des données, source, date… Bla bla bla\n\n Télécharger les données\n\n\n\n\nAffichage de données :\n\n\n\n\n\n\n\n\n\n\n\nDictionnaire des variables :"
  },
  {
    "objectID": "data.html#ii.-gadm-afrique",
    "href": "data.html#ii.-gadm-afrique",
    "title": "Données",
    "section": "II. GADM Afrique",
    "text": "II. GADM Afrique\nPrésentation des données, source, date… Bla bla bla\n\n Télécharger les données\n\n\n\n\nAffichage de données :\n\n\n\n\n\n\n\n\n\n\n\nDictionnaire des variables :"
  },
  {
    "objectID": "data.html#iii.-africapolis",
    "href": "data.html#iii.-africapolis",
    "title": "Données",
    "section": "III. Africapolis",
    "text": "III. Africapolis\nPrésentation des données, source, date… Bla bla bla\n\n Télécharger les données\n\n\n\n\nAffichage d’un échantillon (uniquement Ghana, Bénin et Togo :\n\n\n\n\n\n\n\n\n\n\n\nDictionnaire des variables :"
  },
  {
    "objectID": "data.html#iii.-elevation-bénin",
    "href": "data.html#iii.-elevation-bénin",
    "title": "Données",
    "section": "III. Elevation Bénin",
    "text": "III. Elevation Bénin\nPrésentation des données, source, date… Bla bla bla https://energydata.info/dataset/benin-elevation-2008/resource/55593816-3ef3-45bf-b7f0-7aea16ddaf62\n\n Télécharger les données\n\n\n\n\nAffichage de données :\n\n\n\n\n\n\n\n\n\n\n\n\n\nCaractèristiques du Raster :\n\n\nclass       : SpatRaster \ndimensions  : 742, 369, 1  (nrow, ncol, nlyr)\nresolution  : 0.008339098, 0.008333169  (x, y)\nextent      : 0.774574, 3.851701, 6.23514, 12.41835  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource      : elevation.tif \nname        : elevation"
  },
  {
    "objectID": "modules/import.html",
    "href": "modules/import.html",
    "title": "Données",
    "section": "",
    "text": "Import et export de données\n\n\nLes différents types et formats de données pris en charge par R\n\n\n\n\n\n\n3 févr. 2023\n\n\nHugues pecout\n\n\n\n\n\n\n\n\nPackages de données et API\n\n\nQuelques packages forunisseurs de données\n\n\n\n\n\n\nWork in progress\n\n\n\n\n\n\n\n\nConnexion à une BD\n\n\nComment se connecter à une base de données avec R\n\n\n\n\n\n\nwork in progress\n\n\n\n\n\n\n\n\nExploiter les données OSM\n\n\nRécupérer des données d’OpenStreetMap avec R\n\n\n\n\n\n\nwork in progress\n\n\n\n\n\n\n\n\nWeb scraping\n\n\nCollecte automatique de données issues du web\n\n\n\n\n\n\nwork in progress\n\n\n\n\n\n\nAucun article correspondant\n\n\n\n\nRevenir à la page d’acceuil des modules"
  },
  {
    "objectID": "modules/geomatique.html",
    "href": "modules/geomatique.html",
    "title": "Géomatique",
    "section": "",
    "text": "Géomatique avec R - vecteur\n\n\nLe package sf pour manipuler les données géographiques vectorielles\n\n\n\n\n\n\n6 févr. 2023\n\n\nTimothée Giraud, Hugues pecout\n\n\n\n\n\n\n\n\nGéomatique avec R - raster\n\n\nLe package terra pour manipuler les données géographiques RASTER\n\n\n\n\n\n\n6 févr. 2023\n\n\nHugues pecout, Timothée Giraud\n\n\n\n\n\n\nAucun article correspondant\n\n\n\n\nRevenir à la page d’acceuil des modules"
  },
  {
    "objectID": "modules/cartographie.html",
    "href": "modules/cartographie.html",
    "title": "Cartographie",
    "section": "",
    "text": "Cartographie avec mapsf\n\n\nPrésentation du package mapsf pour la cartographie thématique\n\n\n\n\n\n\n6 févr. 2023\n\n\nTimothée Giraud, Hugues pecout\n\n\n\n\n\n\n\n\nCartographie 3D et anamorphoses\n\n\n\n\n\n\n\n\n\nwork in progress\n\n\n\n\n\n\nAucun article correspondant\n\n\n\n\nRevenir à la page d’acceuil des modules"
  },
  {
    "objectID": "modules/reproductibilite.html",
    "href": "modules/reproductibilite.html",
    "title": "Reproductibilité",
    "section": "",
    "text": "Le package miniCRAN\n\n\nCréer son CRAN personnel en local\n\n\n\n\n\n\n3 févr. 2023\n\n\nHugues Pecout\n\n\n\n\n\n\n\n\nLe package renv\n\n\n\n\n\n\n\n\n\nwork in progress\n\n\n\n\n\n\n\n\nLiterate programming\n\n\n\n\n\n\n\n\n\nwork in progress\n\n\n\n\n\n\n\n\nLes notebooks (exécutables)\n\n\n\n\n\n\n\n\n\nwork in progress\n\n\n\n\n\n\nAucun article correspondant\n\n\n\n\nRevenir à la page d’acceuil des modules"
  },
  {
    "objectID": "modules/graphique/Rbase_graph.html",
    "href": "modules/graphique/Rbase_graph.html",
    "title": "Graphique R-base",
    "section": "",
    "text": "Le langage R met à disposition un ensemble de fonctions pour la représentation graphique via le package pré-installé graphics . Bien que l’on préférera des packages spécialisés et plus complets comme ggplot2 pour créer de jolis graphiques personnalisés, les fonctions R-base de représentation peuvent être très utiles en matière d’exploration de données."
  },
  {
    "objectID": "modules/graphique/Rbase_graph.html#principales-fonctions",
    "href": "modules/graphique/Rbase_graph.html#principales-fonctions",
    "title": "Graphique R-base",
    "section": "Principales fonctions",
    "text": "Principales fonctions\nLes fonctions graphiques peuvent être classées en trois catégories :\nI. Les fonctions permettant de créer différents types de graphiques :\n\nplot() : Fonction générique de représentation graphique\nmatplot() : Dispersions de toutes le variables d’un tableau (un graphique)\npairs() : Matrice de nuage de point pour l’ensemble des variables d’un tableau\nstripchart() : diagrammes de dispersion\ndotchart() : diagramme en points de Cleveland\nboxplot() : diagramme en boîte\nqqnorm() : diagramme quantile-quantile théorique normal\nqqplot() : diagramme quantile-quantile empirique\nbarplot() : diagramme à barres\npie() : diagramme en secteurs\nmosaicplot() : diagramme en mosaïque\nspineplot() : diagrammes en épine (entre l’histogramme et le mosaic plot)\nhist() : histogramme\ncurve() : Représentation d’une expression mathématique\netc….\n\nII. les fonctions permettant d’ajouter de l’information à un graphique existant :\n\nlegend() : légende\ntitle() : titre\ndensity() : courbe de densité à noyau\npoints() : point\nrug() : représentation stripchart le long de l’axe des x\nlines() : segments de droites reliant des points\nmatlines() : segments de droites reliant des points (utiliser avec matplot())\nabline() : droites traversant toute la zone graphique\ntext() : texte dans la zone graphique\nmtext() : texte dans la marge\netc…\n\nIII. Les fonctions utilisées pour fixer et contrôler des paramètres graphiques généraux :\n\npar()\nlayout()\n\n\n\n\nLa fonction plot()\nLa fonction primitive de représentation graphique la plus couramment utilisée est la fonction plot(). Il s’agit d’une fonction générique dont le comportement s’adapte automatiquement à la nature de ses arguments.\n\n\n\n\n\n\nAvertissement\n\n\n\nEn fonction du type de variable choisie, la fonction plot() peut produire un graphique de style barplot, spineplot, stripchart, barplot ou curve.\n\n\nIl est même possible d’exécuter cette fonction sur l’ensemble d’un dataframe. Des nuages de points par couple de variables seront alors automatiquement produits :\n\nplot(iris) \n\n\n\n\n\n\n\n\nDeux syntaxes sont possibles pour utiliser cette fonction sur deux variables :\n\nClassique :\n\n\nx <- seq(-pi, pi, 0.1)\ny <- sin(x)\n\n\nplot(x, y) \n\n\n\n\n\n\n\n\n\nsyntaxe “formule” :\n\n\nplot(y ~ x)        \n\n\n\n\n\n\n\n\nDans l’expression y ~ x, y désigne la variable dépendante (à expliquer) et varX la variable indépendante (explicative).\nLa fonction plot() accepte une multitude d’arguments qui permettent de façonner les graphiques (voir le Help pour plus de détails).\n\nplot(y ~ x, \n  type = \"o\", # type de tracé: points (\"p\"), lignes (\"l\"), les deux (\"b\" ou \"o\"), ...\n  col = \"red\", # couleur, tapez `colours()` pour la liste complète\n  pch = 20, # type de symboles, un chiffre entre 0 et 25, tapez `?points`\n  cex = 1.1, # taille des symboles\n  lty = 1, # type de lignes, un chiffre entre 1 et 6\n  lwd = 1.4, # taille de lignes\n  xlim = c(-2.5, 2.5), # limites de l'axe des x\n  ylim = c(-1.5, 1.5), # limites de l'axe des y)\n  xlab = \"La variable x\", # titre pour l'axe des x\n  ylab = \"Le sinus  de x\", # titre pour l'axe des y\n  main = \"La fonction sinus entre -pi et pi\" # titre général pour le graphique\n) \n\n\n\n\n\n\n\n\n\n\n\n\nAjout d’éléménts\nUne fois le graphique construit, plusieurs fonctions primitives vous permettre d’ajouter différents éléments. Exemple :\n\nplot(y ~ x, \n  type = \"o\", # type de tracé: points (\"p\"), lignes (\"l\"), les deux (\"b\" ou \"o\"), ...\n  col = \"red\", # couleur, tapez `colours()` pour la liste complète\n  pch = 20, # type de symboles, un chiffre entre 0 et 25, tapez `?points`\n  cex = 1.1, # taille des symboles\n  lty = 1, # type de lignes, un chiffre entre 1 et 6\n  lwd = 1.4, # taille de lignes\n  xlim = c(-2.5, 2.5), # limites de l'axe des x\n  ylim = c(-1.5, 1.5), # limites de l'axe des y)\n  xlab = \"La variable x\", # titre pour l'axe des x\n  ylab = \"Le sinus  de x\") # titre pour l'axe des y) \n\n\n# Ajout d'une LEGENDE\nlegend(x = 0.9, # Emplacement de la légende (coin haut gauche)\n       y = -1.1, # Emplacement de la légende (coin haut gauche)\n       legend = \"Fonction sinus entre -pi et pi\", \n       bg = \"lightgoldenrod\",\n       col = \"red\",\n       pch = 20,\n       cex = 0.7, # Taille de lé lagende\n       lty = 1, \n       lwd = 1.4)\n\n# Ajout d'une LIGNE (horizontale)\nabline(h = 0, # Coupe l'axe des y à cette valeur \n       lty = 2, # Type de ligne\n       lwd = 0.5, # épaisseur\n       col = \"grey50\")\n\n# Ajout d'un POINT\npoints(x = -0, \n       y = 0, \n       col = \"red4\", \n       pch = 20,# Type de symbol\n       cex = 4)\n\n# Ajout de TEXTE\ntext(\"x = 0 = y\", # Texte à afficher\n     x = 0.4, # Emplacement du texte (centre)\n     y = -0.16, # Emplacement du texte (centre)  \n     col = \"red4\")     \n       \n# Ajout d'un TITRE\ntitle(\"Titre de mon graphique\", \n      cex.main = 1.2,  \n      font.main= 4, \n      col.main= \"red4\")\n\n\n\n\n\n\n\n\n\n\n\n\nFenêtre graphique\nDeux fonctions - par() et layout() - permettent de gérer les paramètres graphiques, comme la disposition des figures, les marges, les axes, la police… :\nExemple d’utilisation de la fonction par() qui contient un grand nombre d’arguments possibles (cf. ?par) :\n\npar(bg = \"royalblue1\", # Couleur de fond\n    col= \"white\",      # couleur du graphique\n    mfrow = c(2,2),    # Fenêtre découper en deux lignes / deux colonnes (4 graphiques)\n    mar = c(5,3,4,1))  # Gestion des marges pour chaque graphique (B,L,T,R)\n\n\nplot(x = log(1:10), y = 10:1, main = \"plot 1\")\n\nplot(x = exp(1:10), y = log(1:10), main = \"plot 2\")\n\nplot(x = sin(1:10), y = 1:10, main = \"plot 3\")\n\nplot(x = 1:10, y = exp(1:10), main = \"plot 4\")\n\n\n\n\n\n\nlayout() propose moins d’arguments mais permet un meilleur ajustement de la disposition des figures. Pour cela, il est nécessaire de construire une matrice pour indiquer la position et l’espace de chaque graphique ajouté. Exemple :\n\nmatrix(c(1,1,1,2,0,3,2,0,3),  3,  3,  byrow = TRUE)\n\n     [,1] [,2] [,3]\n[1,]    1    1    1\n[2,]    2    0    3\n[3,]    2    0    3\n\n\nAvec la matrice ci-dessus, la fenêtre graphique sera paramétrée pour contenir trois graphiques. Le graphique 1 occupera toute la première ligne. le graphique 2 occupera les deux dernières lignes de la première colonne, et le 3e sera situé dans les deux dernières lignes de la dernière colonne. Exemple :\n\npar(bg  = \"royalblue1\",  col= \"white\")\n\n# Découpage de la fenêtre graphique\nlayout(mat = matrix(c(1,1,1,2,0,3,2,0,3),  3,  3,  byrow = TRUE))\n\nplot(x = exp(1:10), y = log(1:10), main = \"plot 1\")\nplot(x = sin(1:10), y = 1:10, main = \"plot 2\")\nplot(x = log(1:10), y = 10:1, main = \"plot 3\")"
  },
  {
    "objectID": "modules/graphique/Rbase_graph.html#principaux-graphiques",
    "href": "modules/graphique/Rbase_graph.html#principaux-graphiques",
    "title": "Graphique R-base",
    "section": "Principaux graphiques",
    "text": "Principaux graphiques\n\nVariable Quanti.\nPour représenter la distribution d’un variable quantitative, plusieurs types de graphiques peuvent être utilisés.\n\nstripchart()\nLa fonction stripchart() permet de représenter la distribution d’une variable quantitative.\n\n\nCode\npar(mfrow = c(2,2)) \n\n# gauche supérieur\nstripchart(cars$speed, xlab = \"speed\", pch = 16)\n\n# droite supérieur\nstripchart(cars$speed, xlab = \"speed\", method = \"stack\", pch = 16)\n\n# gauche inférieur\nstripchart(cars$speed, xlab = \"speed\", method = \"jitter\", pch = \"#\")\n\n# droite inférieur\nstripchart(cars$speed, ylab = \"speed\", method = \"jitter\", vertical = TRUE)\n\n\n\n\n\n\n\nhist()\nLa fonction hist() permet de construire un histogramme.\n\n\nCode\npar(mfrow = c(2,2)) \n\n# gauche supérieur\nhist(cars$speed)\n\n# droite supérieur\nhist(cars$speed, breaks = quantile(cars$speed), main = \"Histogramme par quartile\")\n\n# gauche inférieur\nhist(cars$speed, freq = FALSE, main = \"Histogramme des proportions\")\n\n# droite inférieur\nhist(cars$speed, freq = FALSE, main = \"Histogramme et densité échantillonnale\")\nlines(density(cars$speed))\n\n\n\n\n\n\n\nboxplot()\nLa fonction boxplot()permet de construire une boîte à moustache. Elle peut être associée à la fonction stripchart().\n\n\nCode\npar(mfrow = c(1,2)) \n\n# gauche\nboxplot(cars$dist)\n\n# droite\nboxplot(cars$dist, horizontal=T, varwidth= TRUE, col = \"red4\", outline = FALSE)\nstripchart(cars$dist,  pch = 16, metho = \"jitter\", add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2 variables Quanti.\n\nplot()\nUtilisez la fonction plot() pour représenter deux variables quantitatives.\n\n\nCode\nplot(speed ~ dist, data = cars, pch = 16)\n\n# Ajout d'une marque pour chaque individus le long de l'axe des abcisses\nrug(cars$dist)\n\n\n\n\n\n\n\n\n\n\n\n\nVariable Quali.\n\nplot()\nLa fonction plot() peut être utilisée pour une variable qualitative. Pour cela la variable doit être stockée dans le format factor.\n\nclass(esoph$alcgp)\n\n[1] \"ordered\" \"factor\" \n\nplot(esoph$agegp)\n\n\n\n\n\n\n\n\n\n\nbarplot()\nVous pouvez utiliser la fonction barplot() sur une table de fréquence.\n\n# Calcul table de fréquence\ntable_freq <- table(esoph$agegp)\n\n# Fréquence par modalité\ntable_freq \n\n\n25-34 35-44 45-54 55-64 65-74   75+ \n   15    15    16    16    15    11 \n\nbarplot(table_freq )\n\n\n\n\n\n\n\n\n\n\n\n\n\n2 variables Quali.\nComme avec une variable qualitative, vous pouvez utiliser les fonction plot() et barplot() pour représenter La répartition d’individus en fonction de deux variables qualitatives.\n\nplot()\nComme avec une seule variable, les variables qualitatives croisées doivent être stockée en factor.\n\n\nCode\nplot(alcgp ~ agegp, data = esoph)\n\n\n\n\n\n\n\n\n\n\n\nbarplot()\nLa fonction barplot fonctionne également sur deux variables qualitatives. Dans un premier temps, calculez le tableau croisé à partir des deux variables qualitatives ciblées :\n\n# Calcul table de fréquence\ntable_freq <- table(esoph$alcgp, esoph$agegp)\n\n# Fréquence par modalité\ntable_freq \n\n           \n            25-34 35-44 45-54 55-64 65-74 75+\n  0-39g/day     4     4     4     4     4   3\n  40-79         4     4     4     4     3   4\n  80-119        3     4     4     4     4   2\n  120+          4     3     4     4     4   2\n\n\nPuis utilisez la fonction barplot() :\n\n\nCode\npar(mfrow = c(2,2)) \n\n# gauche supérieur\nbarplot(table_freq)\n\n# droite supérieur\nbarplot(table_freq, horiz = TRUE)\n\n# gauche inférieur\nbarplot(table_freq, horiz = TRUE, beside=TRUE)\n\n# droite inférieur\nbarplot(table_freq, beside=TRUE, legend.text = levels(esoph$alcgp), \n        args.legend=list(x=\"bottomright\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuanti. et Quali.\n\nplot()\nLa fonction généraliste plot() peut être utilisée. Si la variable qualitative est appelée en première, le graphique prendra la forme d’un spine plot (%). Dans le cas contraire, la fonction renverra un ensemble de boxplots.\n\n\nCode\npar(mfrow = c(1,2)) \n\n\n# Spine plot\nplot(agegp ~ ncases, data = esoph, main = \"Spine plot\")\n\n# Boxplot\nplot(ncases ~ agegp, data = esoph, main = \"Boxplots\")\n\n\n\n\n\n\n\n\n\nIl est également possible d’utiliser directement la fonction boxplot pour représenter la distribution de chaque individus pour une variable quantitative, par modalité d’une variable qualitative :\n\n\nCode\nboxplot(ncases ~ agegp, data = esoph)\n\n\n\n\n\n\n\n\n\nL’argument col de la fonction plot() permet aussi de représenter trois variables (quantitative ~ quantitative + qualitative). Pour cela, il est préférable d’utiliser une variable qualitative stockée en format factor.\n\n\nCode\n# Conversion de la variable qualitative en format factor\nmtcars$cyl <- as.factor(mtcars$cyl)\n\n# Nuage de point\nplot(disp ~ wt, \n     data = mtcars, \n     col = cyl, # Couleur des points en fonction d'une variable qualitative\n     pch = 16, \n     xlab = \"Weight\",\n     ylab = \"Displacement\")\n\n# Ajout d'une légende\nlegend(x = \"bottomright\", \n       title = \"Number of cylinders\",\n       legend = levels(mtcars$cyl), \n       col =  1:3, \n       ncol = 3, \n       pch = 16)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTableau complet\nLa fonction pairs() (ou plot()) permet de construire une matrice du nuages de points entre toutes les variables d’un tableau, quelque soit leur type.\n\n\nCode\npairs(iris)\n\n\n\n\n\n\n\n\n\n\n\n\n\nExpression math.\nLa fonction curve() permet de tracer de représenter une expression mathématique.\n\n\nCode\ncurve(expr = (x), col = \"grey30\", from = -2, to = 2)\ncurve(expr = x^2,  col = \"green4\", add = TRUE)\ncurve(expr = x^3, col = \"red\", add = TRUE)\n\nlegend(\"bottomright\", title = \"Function\", \n       legend = c(\"(x)\", \"x^2\", \"x^3\"), \n       col = c(\"grey30\", \"green4\", \"red\"), \n       lty = 1)"
  },
  {
    "objectID": "modules/graphique/Rbase_graph.html#exporter-un-graphique",
    "href": "modules/graphique/Rbase_graph.html#exporter-un-graphique",
    "title": "Graphique R-base",
    "section": "Exporter un graphique",
    "text": "Exporter un graphique\nUn graphique crée dans RStudio est affiché par défaut dans l’onglet Plots. Dans cet onglet, vous pouvez zoomer sur le graphique en cliquant sur le bouton Zoom. Vous pouvez aussi enregistrer le graphique en cliquant sur le bouton Export :\n\n\n\n\n\nL’export d’un graphique peut être automatisé en ligne de code R de différente manière (cf. module import). Le procédure d’export la plus simple peut être réalisé avec la fonction dev.print(). Cette fonction permet aussi bien un export en format vectoriel que matricielle du graphique affiché.\n\n# Format pdf\ndev.print(device = pdf, \"graph_export.pdf\", width = 600) \n\n# format svg\ndev.print(device = svg, file = \"graph_export.svg\", width = 6)\n\n# format png\ndev.print(device = png, file = \"graph_export.png\", width = 600)\n\n# format png\ndev.print(device = jpeg, file = \"graph_export.jpeg\", width = 600)"
  },
  {
    "objectID": "modules/graphique/Rbase_graph.html#exercice",
    "href": "modules/graphique/Rbase_graph.html#exercice",
    "title": "Graphique R-base",
    "section": " Exercice",
    "text": "Exercice\n\n1. Créez un projet Rstudio\nFile/New Project/New Directory…\n2. Téléchargez les données suivantes :\n\n\n\n\n\n\n\nIntitulé\nTéléchargement\n\n\n\n\nDonnées pays africains (UN-CEPII)\n Download\n\n\n\n3. Placez les données (décompressées) dans le répertoire de votre projet, de la façon suivante :\n\n\n\n\n\n\n\n\n\n4. Importez le fichier “afrika_don.csv” dans un data.frame\n\n\nUn peu d’aide ?\n... <- read.csv2(file = \"...\")\n\n\n5. Construisez un histogramme par quartile pour la variable “POP” :\n\n\n\n\n\n\n\nUn peu d’aide ?\nhist(..., breaks  = quantile(...))\n\n\n6. Améliorez la mise en page, en ajoutant par exemple un peu de couleur, un titre, une source… :\n\n\n\n\n\n\n\nUn exemple ?\npar(bg = \"cornsilk3\")\n\nhist(My_data$POP, \n     breaks  = quantile(My_data$POP),\n     col = \"green4\",\n     border = \"white\",\n     xlab = \"Nombre d'habitants (millions)\", \n     ylab = \"Proportion\", \n     main = \"Répartition des pays africains selon leur population\")\n\nrug(My_data$POP)\nmtext(side = 4, \"source : UN, 2020\", cex = 0.8)\n\n\n7. Exportez le graphique à l’aide d’une fonction (format png)\n\n\nUn peu d’aide ?\ndev.print(device = ..., file = \"...\")\n\n\n\n\n\n\n\nCorrection\n# Import des données\ndata <- read.csv2(file = \"../data/DEV_AFRICA_2018/afrika_don.csv\")\n\n# Paramétrage de la couleur de fond de la fenêtre graphique\npar(bg = \"cornsilk3\")\n\n# Histogramme sur la variable 'POP'\nhist(data$POP, \n     breaks  = quantile(data$POP),\n     col = \"green4\",\n     border = \"white\",\n     xlab = \"Nombre d'habitants (millions)\", \n     ylab = \"Proportion\", \n     main = \"Répartition des pays africains selon leur population\")\n\n# Ajout de marques pour chaque individus (axe des abscisses)\nrug(data$POP)\n\n# Ajout de la source des données\nmtext(side = 4, \"source : UN, 2020\", cex = 0.8)\n\n# Export en PNG\ndev.print(device = png, file = \"mon_graphique.png\", width = 600)"
  },
  {
    "objectID": "modules/statistique.html",
    "href": "modules/statistique.html",
    "title": "Statistique",
    "section": "",
    "text": "Statistique descriptive univariée\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nStatistique descriptive bivariée\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nStatistique descriptive multivariée\n\n\n\n\n\n\n\n \n\n\n\n\nAucun article correspondant\n\n\n\n\nRevenir à la page d’acceuil des modules"
  },
  {
    "objectID": "modules/manipulation.html",
    "href": "modules/manipulation.html",
    "title": "Manipulation",
    "section": "",
    "text": "Utilisation du tidyverse\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nManipulation en R-base\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nUtilisation de data.table\n\n\n\n\n\n\n\n \n\n\n\n\nAucun article correspondant\n\n\n\n\nRevenir à la page d’acceuil des modules"
  },
  {
    "objectID": "modules/graphique.html",
    "href": "modules/graphique.html",
    "title": "Graphique",
    "section": "",
    "text": "Graphique R-base\n\n\nRepresentations graphiques avec les fonctions primitives\n\n\n\n\n\n\n3 févr. 2023\n\n\nHugues pecout\n\n\n\n\n\n\n\n\nGraphique avec ggplot2\n\n\nRepresentations graphiques avec ggplot2\n\n\n\n\n\n\n27 janv. 2023\n\n\nHugues pecout\n\n\n\n\n\n\nAucun article correspondant\n\n\n\n\nRevenir à la page d’acceuil des modules"
  },
  {
    "objectID": "modules/import/import.html",
    "href": "modules/import/import.html",
    "title": "Import et export de données",
    "section": "",
    "text": "De nombreuses de fonctions (primitives ou non) permettent d’importer et d’exporter des données de différents formats."
  },
  {
    "objectID": "modules/import/import.html#tableau-de-données",
    "href": "modules/import/import.html#tableau-de-données",
    "title": "Import et export de données",
    "section": "Tableau de données",
    "text": "Tableau de données\n\nFichier texte simple\nUn fichier texte simple (ou fichier texte brut) est un fichier dont le contenu représente uniquement une suite de caractères. Il peut s’ouvrir avec n’importe quel éditeur de texte et utilise nécessairement une forme particulière de codage des caractères.\nPlusieurs fonctions primitives permettent d’importer et d’exporter des fichiers texte simples, comme les fichiers csv, txt , tsv…\n\nImport\n\nread.delim() : fichiers délimités par un symbole quelconque et “.” en séparateur décimal\nread.delim2() : fichiers délimités par un symbole quelconque et “,” en séparateur décimal\nread.table() : pour des fichiers texte délimités par des espaces\n\nread.csv() : pour des fichiers texte délimités par des virgules (format csv)\nread.csv2() : pour des fichiers texte délimités par des points-virgules (format csv français)\n\nPour que l’import de données s’effectue correctement, il est parfois nécessaire de renseigner plusieurs arguments, comme par exemple :\nheader = valeur logique qui indique si la première ligne contient les noms des variables. sep = indique le caractère utilisé comme séparateur de champ (ex : “;”) encoding = Chaîne de caractère qui précise l’encodage utilisé pour le fichier (ex : “UTF-8”).\n\n\n\n\n\n\nImportant\n\n\n\nN’oubliez pas d’assigner le résultat dans un objet pour garder en mémoire vos données importées.\n\n\n\n# Exemple d'utilisation de read.table()\nmon_tableau  <- read.table(file = \"../data/DEV_AFRICA_2018/afrika_don_meta.csv\", \n                           header = TRUE,\n                           sep= \";\",\n                           encoding = \"UTF-8\")\n\n\n# Le tableau importé est stocké dans un objet data.frame\nclass(mon_tableau)\n\n[1] \"data.frame\"\n\n\n\n\nExport\nDes fonctions primitives permettent également d’exporter votre tableau de données vers différents format texte.\n\nwrite.table() : pour tous les types de formats texte simple (séparateur à renseigner)\nwrite.csv() : pour exporter en csv (séparateur virgule)\nwrite.csv2() : pour exporter en csv (séparateur points-virgules)\n\n\n\nVoir l’exemple\n# Exemple write.table()\nwrite.table(x = mon_tableau, \n            file = \"../data/tableau.txt\", \n            sep = \"\\t\", col.names = TRUE, \n            fileEncoding = \"UTF-8\")\n              \n# Exemple write.csv()\nwrite.csv(x = mon_tableau, file = \"../data/tableau.csv\")\n\n\n\n\n\n\n\nFichier Excel\nIl est parfois nécessaire d’importer des tableaux de données stockées dans un format propriétaire, comme par exemple Excel (xls, xlsx) ou SAS. Plusieurs packages vous permettent d’importer ce genre de format, et même d’exporter vos données dans ce type de format.\n\nImport\nVous pouvez par exemple importer un fichier Excel avec le package readxl.\n\ninstall.packages(\"readxl\")\n\n\n\n\n\n\n\nImportant\n\n\n\nLe packages readxl fait partie de l’écosystème tidyverse (cf. module x). Pour cette raison, le tableau importé est mis en mémoire dans un objet tibble et non dataframe. Il s’agit de deux objets très semblables mais pas identiques. Pour convertir un tibble en dataframe, vous pouvez utiliser la fonction as.data.frame().\n\n\n\nlibrary(readxl)\nmon_tableau <- read_excel(path = \"../data/DEV_AFRICA_2018/afrika_don.xls\", \n                          sheet = \"afrika_meta\", \n                          skip = 0,\n                          col_names = TRUE)\n\n# Le tableau importé est stocké dans un objet data.frame\nclass(mon_tableau)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n\nExport\nPour exporter un dataframe (ou tibble) dans un fichier au format Excel, vous pouvez utiliser le package openxlsx et sa fonction write.xlsx().\n\ninstall.packages(\"openxlsx\")\n\n\n\n\n\n\n\nImportant\n\n\n\nLe packages openxlsx permet uniquement de lire et écrire les fichiers Excel comportant l’extension .xlsx.\n\n\n\n\nVoir l’exemple\nlibrary(openxlsx)\nwrite.xlsx(x = mon_tableau, file = \"../data/DEV_AFRICA_2018/afrika_don.xlsx\")\n\n\n\n\n\n\n\nSAS, SPSS & Stata\nLe package haven permet de gérer des fichiers propriétaires de différents formats comme SAS, SPSS, Stata, dbf…\n\ninstall.packages(\"haven\")\n\n\n\n\n\n\n\nImportant\n\n\n\nTout comme readxl, ce package fait partie de l’écosystème tidyverse (cf. module x). Le tableau importé est mis en mémoire dans un objet tibble et non dataframe. Vous pouvez utiliser la fonction as.data.frame() pour le convertir.\n\n\n\nFichier SAS\n\n\nVoir l’exemple\nlibrary(haven)\n\n# Import\nmon_tableau  <- read_sas(data_file = \"../data/data_sas.sas7bdat\")\n\n# Export\nwrite_sas(data = mon_tableau, path = \"../data/mon_tableau_sas.sas7bdat\")\n\n\n\n\nFichier SPSS\n\n\nVoir l’exemple\nlibrary(haven)\n\n# Import\nmon_tableau  <- read_sav(file =  \"../data/data_spss.sav\")\n\n# Export\nwrite_sav(data = mon_tableau, path =  \"../data/mon_tableau_spss.sav\")\n\n\n\n\nFichier Stata\n\n\nVoir l’exemple\nlibrary(haven)\n\n# Import\nmon_tableau  <- read_stata(file =  \"../data/data_stata.dta\")\n\n# Export\nwrite_dta(data = mon_tableau, path =  \"../data/mon_tableau_stata.dta\")"
  },
  {
    "objectID": "modules/import/import.html#couche-géographique",
    "href": "modules/import/import.html#couche-géographique",
    "title": "Import et export de données",
    "section": "Couche géographique",
    "text": "Couche géographique\n\nVecteur\nLe package sf permet de lire les différents formats de couche géographique vectorielle (ESRI Shapefile, GeoJSON, Keyhole Markup Language, GeoPackage…). Pour cela, ce package interface avec la librairie système GDAL. Les SIG fonctionnent de la même façon !\n\ninstall.packages(\"sf\")\n\n\n\n\n\n\n\nNote\n\n\n\nL’installation du package sf demande un prérequis. La librairie système GDAL doit être installée sur votre machine. Il est parfois nécessaire de la faire soi-même sur certains système d’exploitation comme GNU/Linux.\n\n\n\nImport\n\nlibrary(sf)\nmap_africa <- st_read(\"../data/GADM_AFRICA_2020/afrika_map.shp\",  quiet = TRUE)\n\nclass(map_africa)\n\n[1] \"sf\"         \"data.frame\"\n\n\n\n\n\n\n\n\nImportant\n\n\n\nUne couche géographique importée via la fonction st_read() du package sf est mise en mémoire dans un objet sf (simple feature). Il s’agit en quelque sorte d’un dataframe ou chaque individu est associé à une géométrie.\n\n\n\n\nExport\nLa fonction st_write() permet d’enregistrer un objet sf sur sa machine, dans le format que l’on souhaite.\n\n\nVoir les exemples\nlibrary(sf)\n\n# Enregistrement en format ESRI Shapefile\nst_write(obj = map_africa, \n         dsn = \"../data/map_africa.shp\", \n         layer_options = \"ENCODING=UTF-8\")\n\n\n# Enregistrement en format GeoPackage\nst_write(obj = map_africa, \n         dsn = \"../data/map_africa.gpkg\", \n         layer = \"pays\")\n\n\n\n\n\n\n\nRaster\nLe package terra permet aussi de lire et d’écrire des données géographiques vectorielles (comme sf) mais sa valeur ajoutée se situe au niveau de la manipulation de données raster.\n\ninstall.packages(\"terra\")\n\n\nImport\nPour importer des données Raster, vous pouvez utiliser la fonction rast().\n\n\n\n\n\n\nImportant\n\n\n\nUn Raster importé via la fonction rast() du package terra est mis en mémoire dans un objet SpatRaster.\n\n\n\nlibrary(terra)\nElevation_Benin <- rast(\"../data/elevation.tif\") \n\nElevation_Benin\n\nclass       : SpatRaster \ndimensions  : 742, 369, 1  (nrow, ncol, nlyr)\nresolution  : 0.008339098, 0.008333169  (x, y)\nextent      : 0.774574, 3.851701, 6.23514, 12.41835  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource      : elevation.tif \nname        : elevation \n\n\n\n\nExport\nLa fonction writeRaster() permet d’enregistrer un objet SpatRaster sur sa machine, dans le format que l’on souhaite.\n\n\nVoir l’exemple\nlibrary(terra)\nwriteRaster(x = Elevation_Benin, filename = \"../data/Benin_Elevation.tif\")"
  },
  {
    "objectID": "modules/import/import.html#image",
    "href": "modules/import/import.html#image",
    "title": "Import et export de données",
    "section": "Image",
    "text": "Image\n\nImport\nPour importer des images, le package pnget jpeg, pré-installés avec le language R vous permet d’importer des images.\n\nPNG\n\n\nVoir l’exemple\nlibrary(png)\nmon_image_png <- readPNG(\"../img/map.png\")\n\n\n\n\nJPEG\n\n\nVoir l’exemple\nlibrary(jpeg)\nmon_image_jpg <- readJPEG(\"../img/wip.jpg\")\n\n\n\n\n\nExport\nIl est également possible d’exporter les sorties graphiques en format image avec les fonctions primitives suivantes :\n\nbmp()\njpeg()\npng()\ntiff()\n\nCes fonctions doivent être utilisées avec la fonction dev.off(). Exemple :\n\n\nVoir l’exemple\n# Ouverture de la création de l'image\npng(filename = \"../img/mon_image.jpg\")\n\n# Création de la représentation graphique souhaitée\nplot(1:10)\n\n# Fermeture (enregistrement) de l'image png\ndev.off()\n\n\n\n\n\n\n\n\nImportant\n\n\n\nLa fonction dev.off() permet de clôturer la représentation graphique et d’enregistrer l’image. Si aucun dev.off() n’est exécuté à la suite de ces fonctions d’export, votre fenêtre graphique restera figée, et inutilisable.\n\n\nIl est également possible d’exporter vos représentations graphiques dans un format vectoriel, qui permet leur retouche avec des logiciel de DAO (Inkscape, Adobe Illustrator…). Les fonction pour réaliser cela sont :\n\npdf()\nsvg()\n\nL’utilisation de ces fonctions primitives est similaire à l’export d’images matricielles. Exemple :\n\n\nVoir l’exemple\n# Ouverture de la création de l'image\npdf(file = \"../img/mon_image.pdf\")\n\n# Création de la représentation graphique souhaitée\nplot(1:10)\n\n# Fermeture (enregistrement) du pdf\ndev.off()"
  },
  {
    "objectID": "modules/import/import.html#exercice",
    "href": "modules/import/import.html#exercice",
    "title": "Import et export de données",
    "section": " Exercice",
    "text": "Exercice\n\n1. Créez un projet Rstudio\nFile/New Project/New Directory…\n2. Téléchargez les données suivantes :\n\n\n\n\n\n\n\nIntitulé\nTéléchargement\n\n\n\n\nDonnées pays africains (UN-CEPII)\n Download\n\n\nFond de carte Afrique (GADM 2020)\n Download\n\n\nRaster délévation du Bénin (???)\n Download\n\n\n\n\n\n3. Placez les données (décompressées) dans le répertoire de votre projet, de la façon suivante :\n\n\n\n\n\n\n\n\n\n4. Créez un script R à la racine de votre projet Rstudio\nFile/New File/R script\n5. Importer les fichiers suivants en utilisant les fonctions adéquates :\n\ndata/DEV_AFRIA_2018/afrika_don.csv\n\ndata/DEV_AFRICA_2018/afrika_don.xls (1er onglet)\n\ndata/GADM_AFRICA_2020/afrika_map.shp\n\ndata/elevation.tif\n\n\n\n\nUn peu d’aide ?\n# Pour importer un fichier csv (afrika_don.csv)\nread.csv()\nread.csv2()\n\n# Pour importer un fichier Excel (afrika_don.xls)\nlibrary(readxl)\nread_excel()\n\n# Pour importer un fichier ESRI Shapefile (afrika_map.shp)\nlibrary(sf)\nst_read()\n\n\n\n\nCorrection\n# Import du fichier csv \"afrika_don.csv\"\ndata_from_csv <- read.csv2(file = \"data/DEV_AFRICA_2018/afrika_don.csv\")\n\n# Import du fichier xls \"afrika_don.xls\"\nlibrary(readxl)\ndata_from_xls <- read_excel(path = \"data/DEV_AFRICA_2018/afrika_don.xls\")\n\n# Importer du fichier shp \"afrika_map.shp\"\nlibrary(sf)\ndata_from_shp <- st_read(\"data/GADM_AFRICA_2020/afrika_map.shp\",  quiet = TRUE)\n\n\n\n\n\n\n\n Télécharger ce document format PDF"
  },
  {
    "objectID": "modules/import/osm.html",
    "href": "modules/import/osm.html",
    "title": "Exploiter les données OSM",
    "section": "",
    "text": "Work in progress"
  },
  {
    "objectID": "modules/import/scraping.html",
    "href": "modules/import/scraping.html",
    "title": "Web scraping",
    "section": "",
    "text": "Work in progress"
  },
  {
    "objectID": "modules/import/connectBD.html",
    "href": "modules/import/connectBD.html",
    "title": "Connexion à une BD",
    "section": "",
    "text": "Work in progress"
  },
  {
    "objectID": "modules/reproductibilite/minicran.html",
    "href": "modules/reproductibilite/minicran.html",
    "title": "Le package miniCRAN",
    "section": "",
    "text": "Le package miniCRAN permet de créer un dépôt en interne composé de packages sélectionnés dans des dépôts de type CRAN. Cela permet de récupérer les sources binaires de packages ciblés, et de les rendre disponibles où l’on souhaite (sur sa machine, sur clef USB, sur son propre serveur…).\nminiCRAN peut par exemple être utilisé pour créer son CRAN personnel sur une clef USB, qui vous permettra d’installer ces packages sur n’importe quelle machine sans avoir besoin d’être connecté à internet.\nCommencez par installer le package miniCRAN :\n\ninstall.packages(\"miniCRAN\")\n\nminiCRAN ne récupère pas uniquement le code source d’un package ciblé mais également toutes ses dépendances (autres packages) indispensables à son fonctionnement.\n\nLister les dépendances\nla fonction pkgDep()permet de connaitre la liste de toutes les dépendances d’un package. Exemple :\n\nlibrary(\"miniCRAN\")\n\npkgDep(\"mapsf\", suggests = FALSE, enhances = FALSE)\n\n [1] \"mapsf\"      \"classInt\"   \"Rcpp\"       \"sf\"         \"e1071\"     \n [6] \"class\"      \"KernSmooth\" \"DBI\"        \"magrittr\"   \"s2\"        \n[11] \"units\"      \"MASS\"       \"proxy\"      \"wk\"        \n\n\nVous pouvez visualiser ces dépendances sous forme de graphe à l’aide de la fonction makeDepGraph() :\n\n# Construction d'un objet igraph (graphe) formalisant les dépendances d'un package\ngraph_dep <- makeDepGraph( \"mapsf\", suggests = FALSE, enhances = FALSE)\n\n# Affichage du graphe\nplot(graph_dep , legendPosition = c(-1, 1), vertex.size = 20)\n\n\n\n\n\n\nCréer son miniCRAN\nAvant d’importer les sources des packages ciblés ainsi que leurs dépendances, créez un nouveau répertoire qui permettra de les stocker. Vous pouvez le faire manuellement ou en code R avec la fonction dir.create() :\n\npath_miniCRAN <- \"/home/hugues/Documents/5.Cours/Modules_R/miniCRAN\"\n\n# Création du répertoire nommé \"miniCRAN\"\ndir.create(path = path_miniCRAN)\n\nIl ne vous reste plus qu’à remplir votre répertoire avec les sources des packages ciblés. Pour cela, utilisez la fonction makeRepo() :\n\n# Création d'un vecteur avec le ou les package(s) ciblé(s)\nmes_pkgs <- c(\"readxl\", \"openxlsx\", \"haven\",\n              \"dplyr\", \"lubridate\", \"stringr\",\n              \"ggplot2\", \"FactoMineR\", \"sf\",\n              \"terra\", \"mapsf\", \"rmarkdown\", \"knitr\")\n\n\n# Téléchargement des sources des packages (+ dépendances) dans le répertoire \"miniCRAN\"\nmakeRepo(pkgDep(mes_pkgs), path = path_miniCRAN, type = c(\"source\", \"mac.binary\", \"win.binary\"))\n\n\n\nAjouter des packages\nIl est très simple de rajouter de nouveaux packages (et leur dépendances) dans votre miniCRAN en utilisant la fonction addPackage() :\n\naddPackage(\"tidyr\", path = path_miniCRAN, type = c(\"source\", \"mac.binary\", \"win.binary\"))\n\nPour lister l’ensemble des packages stockés sur votre miniCRAN, utilisez la fonction pkgAvail() :\n\n# Check for available packages\npkgAvail(repos = path_miniCRAN, )[, c(1:3, 5)]\n\n\n\nInstaller un package du miniCRAN\nPour installer un package stocké sur votre miniCRAN local, utilisez la fonction install.packages()de la manière suivante :\n\n# Chemin d'accès jusqu'au \"miniCRAN\" stocké sur votre machine.\nurl_miniCRAN <- paste0(\"file:///\", \"C:/Users/<username>/.../miniCRAN\")\n\n# Installation de ggplot2 \ninstall.packages(\"ggplot2\", \n                 repos = url_miniCRAN,\n                 type = \"source\")\n\n\n\nLe miniCRAN de TIG’R\nUn miniCRAN comportant l’ensemble des packages utilisés dans les leçons de ce site web est mis à disposition. Vous pouvez le télécharger en vous connectant à cette page.\n\n\nPour aller plus loin\nPour connaitre l’ensemble des fonctionnalités offertes par le package miniCRAN, consultez le site web du package.\n\n\n\n\n Télécharger ce document format PDF"
  },
  {
    "objectID": "modules/geomatique/geomatic_vector.html",
    "href": "modules/geomatique/geomatic_vector.html",
    "title": "Géomatique avec R - vecteur",
    "section": "",
    "text": "Le support de cours pour cette leçon est consultable à ce lien :"
  },
  {
    "objectID": "modules/geomatique/geomatic_vector.html#le-package-sf",
    "href": "modules/geomatique/geomatic_vector.html#le-package-sf",
    "title": "Géomatique avec R - vecteur",
    "section": "Le package sf",
    "text": "Le package sf\n Le package sf a été publié fin 2016 par Edzer Pebesma (également auteur du package sp). Son objectif est de combiner les fonctionnalités de sp, rgeos et rgdal dans un package unique plus ergonomique. Ce package propose des objets plus simples (suivant le standard simple feature) dont la manipulation est plus aisée. Une attention particulière a été portée à la compatibilité du package avec la syntaxe pipe et les opérateurs du tidyverse.\nsf utilise directement les librairies systèmes GDAL, GEOS et PROJ.\n\n\n\n\n\n\n\n\n\n\nFrom r-spatial.org\n\n\n\n\nSite web du package sf :\nSimple Features for R"
  },
  {
    "objectID": "modules/geomatique/geomatic_vector.html#lobjet-sf",
    "href": "modules/geomatique/geomatic_vector.html#lobjet-sf",
    "title": "Géomatique avec R - vecteur",
    "section": "L’objet sf",
    "text": "L’objet sf\n\nimport/export…\n\n\nAffichage"
  },
  {
    "objectID": "modules/geomatique/geomatic_vector.html#projection",
    "href": "modules/geomatique/geomatic_vector.html#projection",
    "title": "Géomatique avec R - vecteur",
    "section": "Projection",
    "text": "Projection"
  },
  {
    "objectID": "modules/geomatique/geomatic_vector.html#sélection",
    "href": "modules/geomatique/geomatic_vector.html#sélection",
    "title": "Géomatique avec R - vecteur",
    "section": "Sélection",
    "text": "Sélection\n\nPar attribut\n\n\nSpatiale"
  },
  {
    "objectID": "modules/geomatique/geomatic_vector.html#géotraitements",
    "href": "modules/geomatique/geomatic_vector.html#géotraitements",
    "title": "Géomatique avec R - vecteur",
    "section": "Géotraitements",
    "text": "Géotraitements\n\nBuffer\n\n\nClip"
  },
  {
    "objectID": "modules/geomatique/geomatic_vector.html#mesure",
    "href": "modules/geomatique/geomatic_vector.html#mesure",
    "title": "Géomatique avec R - vecteur",
    "section": "Mesure",
    "text": "Mesure\n\nMatrice de distance"
  },
  {
    "objectID": "modules/geomatique/geomatic_vector.html#géoréférencement",
    "href": "modules/geomatique/geomatic_vector.html#géoréférencement",
    "title": "Géomatique avec R - vecteur",
    "section": "Géoréférencement",
    "text": "Géoréférencement"
  },
  {
    "objectID": "modules/geomatique/geomatic_raster.html",
    "href": "modules/geomatique/geomatic_raster.html",
    "title": "Géomatique avec R - raster",
    "section": "",
    "text": "Le support de cours pour cette leçon est consultable à ce lien :"
  },
  {
    "objectID": "modules/geomatique/geomatic_raster.html#le-package-terra",
    "href": "modules/geomatique/geomatic_raster.html#le-package-terra",
    "title": "Géomatique avec R - raster",
    "section": "Le package terra",
    "text": "Le package terra"
  },
  {
    "objectID": "modules/geomatique/geomatic_raster.html#lobjet-spatraster",
    "href": "modules/geomatique/geomatic_raster.html#lobjet-spatraster",
    "title": "Géomatique avec R - raster",
    "section": "L’objet SpatRaster",
    "text": "L’objet SpatRaster\n\nimport/export…\n\n\nAffichage"
  },
  {
    "objectID": "modules/geomatique/geomatic_raster.html#modifications-de-la-zone-détude",
    "href": "modules/geomatique/geomatic_raster.html#modifications-de-la-zone-détude",
    "title": "Géomatique avec R - raster",
    "section": "Modifications de la zone d’étude",
    "text": "Modifications de la zone d’étude\n\nProjection\n\n\ncrop\n\n\nmask\n\n\naggrégation / désaggragation\n\n\nFusion\n\n\nSegregate ???"
  },
  {
    "objectID": "modules/geomatique/geomatic_raster.html#algèbre-spatiale",
    "href": "modules/geomatique/geomatic_raster.html#algèbre-spatiale",
    "title": "Géomatique avec R - raster",
    "section": "Algèbre spatiale",
    "text": "Algèbre spatiale\n\nOpérations locales\n\n\nOpérations focales\n\n\nOpérations globales\n\n\nOpérations zonales"
  },
  {
    "objectID": "modules/geomatique/geomatic_raster.html#transformation-et-conversion",
    "href": "modules/geomatique/geomatic_raster.html#transformation-et-conversion",
    "title": "Géomatique avec R - raster",
    "section": "Transformation et conversion",
    "text": "Transformation et conversion"
  },
  {
    "objectID": "ressources.html",
    "href": "ressources.html",
    "title": "Ressources",
    "section": "",
    "text": "De très nombreuses ressources diverses et gratuites (livres, articles, agrégateurs, cours, exercices, sites web, vidéos…) pour la pratique de R en sciences humaines et sociale sont référencées sur le site internet rzine.fr. Quelques exemples :\n analyse-R : Site web pour l’introduction à l’analyse d’enquêtes avec R et RStudio , crée et maintenue par Joseph Larmarange.\n Cartographie avec R : Manuel pour la création de cartes thématiques conformes aux règles de la sémiologie graphique et de la cartographie, T. giraud & H. Pecout.\n ElementR : Site web du groupe d’utilisateur·rice·s pour le traitement de l’information géographique avec R, coordonnée l’UMR Géographie-Cités, l’UMR PRODIG et l’UAR RIATE.\n Géomatique avec R : Manuel pour la gestion et le traitements de données spatiales, T. giraud & H. Pecout.\n guide-R : Guide pour l’analyse de données d’enquêtes avec R (version actualisée et restructurée de nombreux chapitres d’analyse-R).\n Parcours R : Supports de formations R MTES & MCTRCT.\n Une introduction à R et au tidyverse : Manuel d’introduction à R, accessible et régulièrement mis à jour, par Julien Barnier.\n UtilitR : Documentation collaborative et open source sur R, destinée en premier lieu aux agents de l’INSEE."
  },
  {
    "objectID": "modules.html",
    "href": "modules.html",
    "title": "Modules thématiques",
    "section": "",
    "text": "Données\n\n\nImport, collecte , connexion BD…\n\n\n\n\n\n\n\n\n\n\n\n\n\nManipulation\n\n\nGestion & traitement de données\n\n\n\n\n\n\n\n\n\n\n\n\n\nStatistique\n\n\nStat. descriptive uni, bi et multivariée\n\n\n\n\n\n\n\n\n\n\n\n\n\nGraphique\n\n\nReprésentation graphique\n\n\n\n\n\n\n\n\n\n\n\n\n\nGéomatique\n\n\nTraitement données vecteur et raster\n\n\n\n\n\n\n\n\n\n\n\n\n\nCartographie\n\n\nCartographie thématique\n\n\n\n\n\n\n\n\n\n\n\n\n\nReproductibilité\n\n\nBonnes pratiques pour la recherche reproductible\n\n\n\n\n\n\n\nAucun article correspondant"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Crédits",
    "section": "",
    "text": "TIG’R a été initié en 2023 par Hugues pecout et Julien Dansou dans le cadre de l’école thématique Méthodes et outils de sciences territoriales organisée par le Collègue Internationnal des Sciences Territoirales. Ce site internet a depuis été ouvert aux contributions extérieurs.\n\nListe des contributeurs à ce jour, par ordre alphabétique :\nJulien Dansou, Timothée Giraud, Hugues Pecout…\n\n\n\n\nConditions d’utilisation\nLe contenu de ce site web (support de cours et exercice inclus) est soumis à la Licence ouverte V2.0 d’Etalab. Le « Réutilisateur » est libre de réutiliser l’ « Information » :\n\nde la reproduire, la copier,\n\nde l’adapter, la modifier, l’extraire et la transformer, pour créer des « Informations dérivées », des produits ou des services,\n\nde la communiquer, la diffuser, la redistribuer, la publier et la transmettre,\n\nde l’exploiter à titre commercial, par exemple en la combinant avec d’autres informations, ou en l’incluant dans son propre produit ou application.\n\nSous réserve de :\n\nmentionner la paternité de l’ « Information » : sa source (cf. citation et la date de dernière mise à jour de l’ « Information » réutilisée.\n\n\n\n\n\n\n\n\nCitation\n\n\nPecout H., et al. 2023. « TIG’R :  Traitement de l’information géographique avec R ». 2023. https://ee2023.netlify.app/."
  },
  {
    "objectID": "presentation.html",
    "href": "presentation.html",
    "title": "Introduction",
    "section": "",
    "text": "TIG’R est un site collaboratif qui met à disposition des leçons entièrement reproductibles pour le traitement de l’information géographique avec R. Les différentes leçon peuvent être utilisées indépendamment les unes des autres. Il est néanmoins nécessaire de connaître les bases du langage R (objets, opérateurs, fonctions…) pour comprendre les différents cours et exercices proposés.\nSi vous êtes débutant.e, plusieurs supports libres et gratuits d’initiation à R sont indiqués dans les ressources annexes. Si vous êtes enseignant, vous pouvez également utilisés ces deux diaporamas pour introduire au langage R :\n\n\n\nConsulter en plein écran\n\n\n\n\n\n\nConsulter en plein écran\n\n\nLes modules thématiques\nLes leçons TIG’R sont classées en sept modules thématiques qui segmente l’ensemble de la chaîne de traitement de données géographiques :\n\nDonnées (Import, collecte , connexion BD… et export de données)\nManipulation de données (gestion & traitement de données)\nStatistique descriptives (uni, bi et multivariée)\nReprésentation graphique (R-base & ggplot2)\nGéomatique (traitement des données vectorielles et raster)\nCartographie thématique (statique et interactive)\nReproductibilité (Bonnes pratiques pour la recherche reproductible)\n\n\n\nLes packages utilisés\nAfin de maximiser la reproductibilité des traitements présentés, les différents modules de formation tentent de minimiser les dépendances à des packages. De plus, les différents packages utilisés sont des références dans la communauté R et laisser présager une certaine stabilité du code présenté.\nLes packages utilisés dans les différents modules thématiques sont :\n\nreadxl\nopenxlsx\nhaven\ndplyr\nlubridate\nstringr\nFactoMineR\nggplot2\nsf\nterra\nmapsf\nrmarkdown\nknitr\n\n\nInstallation\n\n# Liste des packages à installer pour réaliser l'ensemble des leçons\npackages <- c(\"readxl\", \"openxlsx\", \"haven\",\n              \"dplyr\", \"lubridate\", \"stringr\",\n              \"ggplot2\", \"FactoMineR\", \"sf\",\n              \"terra\", \"mapsf\", \"rmarkdown\", \"knitr\")\n\n\n# Détection de package à installer\nmissing_packages <- packages [!(packages  %in% installed.packages()[,\"Package\"])]\n\n# Installation des packages manquants\nif(length(missing_packages)) install.packages(missing_packages)\n\n\n\n\nLe miniCRAN\nAfin de pouvoir reproduire les différentes leçon sans être dépendant d’une connexion internet, un miniCRAN (répertoire contenant les sources de l’ensemble des packages) est mis à disposition :\n\n Télécharger le miniCRAN\n\nUne fois le répertoire décompressé, vous pouvez installer les différents packages en local de la manière suivante :\n\n# Chemin d'accès jusqu'au répertoire \"miniCRAN\" copié sur votre machine.\nURL_dossier <- paste0(\"file:///\", \"C:/Users/<username>/.../\", \"miniCRAN\")\n\n# Installation de ggplot2 depuis la source (répertoire miniCRAN)\ninstall.packages(\"ggplot2\", \n                 repos = URL_dossier,\n                 type = \"source\")\n\n\n\n\n\n\n\nNote\n\n\n\nModifier “C:/Users/username/…/” par le chemin d’accès correct.\n\n\n\n\nLes données utilisées\nLes différents jeux de données utilisés dans les modules sont présentés et mis à disposition sur cette page.\n\n\nConditions d’utilisation\nLe contenu de ce site web (support de cours et exercice inclus) est soumis à la Licence ouverte V2.0 d’Etalab. Le « Réutilisateur » est libre de réutiliser l’ « Information » :\n\nde la reproduire, la copier,\n\nde l’adapter, la modifier, l’extraire et la transformer, pour créer des « Informations dérivées », des produits ou des services,\n\nde la communiquer, la diffuser, la redistribuer, la publier et la transmettre,\n\nde l’exploiter à titre commercial, par exemple en la combinant avec d’autres informations, ou en l’incluant dans son propre produit ou application.\n\nSous réserve de :\n\nmentionner la paternité de l’ « Information » : sa source (cf. citation et la date de dernière mise à jour de l’ « Information » réutilisée.\n\n\n\nCitation TIG’R\n\n\nPecout H., et al. 2023. « TIG’R :  Traitement de l’information géographique avec R ». 2023. https://ee2023.netlify.app/."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "TIG’R est une ressource d’apprentissage pour le traitement de l’information géographique avec R. Ce site a été crée dans le cadre de l’école thématique Méthodes et outils de sciences territoriales organisée par le Collègue Internationnal des Sciences Territoirales et qui s’est déroulée au à Ouidah (Bénin) en Mars 2023.\nCe site contient l’ensemble des supports de cours et exercices reproductibles utilisés pour les modules de formation à R. Ces modules couvrent succinctement l’ensemble de la chaîne de traitement de données géographiques avec R.\nCette ressource est soumise à la Licence ouverte V2.0 d’Etalab. N’hésitez pas à la réutiliser !"
  },
  {
    "objectID": "modules/geomatique/geomatic_vector.html#exercice",
    "href": "modules/geomatique/geomatic_vector.html#exercice",
    "title": "Géomatique avec R - vecteur",
    "section": "Exercice",
    "text": "Exercice"
  },
  {
    "objectID": "modules/geomatique/geomatic_vector.html#correction",
    "href": "modules/geomatique/geomatic_vector.html#correction",
    "title": "Géomatique avec R - vecteur",
    "section": "Correction",
    "text": "Correction\n\n\n\n\n\n\nNote\n\n\n\nCe module est très fortement inspiré du manuel géomatique avec R (T. Giraud & H. Pecout, 2023)."
  },
  {
    "objectID": "modules/cartographie/map_sf.html",
    "href": "modules/cartographie/map_sf.html",
    "title": "Cartographie avec mapsf",
    "section": "",
    "text": "Le support de cours pour cette leçon est consultable à ce lien :"
  },
  {
    "objectID": "modules/cartographie/map_sf.html#exercice",
    "href": "modules/cartographie/map_sf.html#exercice",
    "title": "Cartographie avec mapsf",
    "section": "Exercice",
    "text": "Exercice"
  },
  {
    "objectID": "modules/geomatique/geomatic_raster.html#exercice",
    "href": "modules/geomatique/geomatic_raster.html#exercice",
    "title": "Géomatique avec R - raster",
    "section": "Exercice",
    "text": "Exercice"
  }
]