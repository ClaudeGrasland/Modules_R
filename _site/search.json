[
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "Données",
    "section": "",
    "text": "Note\n\n\n\nTous les jeux de données utilisés dans les différents modules sont présentés sur cette page."
  },
  {
    "objectID": "data.html#téléchargement",
    "href": "data.html#téléchargement",
    "title": "Données",
    "section": "Téléchargement",
    "text": "Téléchargement\nVous pouvez récupérer l’intégralité des jeux de données utilisés dans les différents cours et exercices TIG’R à en cliquant sur ce lien :\n\n  Download"
  },
  {
    "objectID": "data.html#les-jeux-de-données",
    "href": "data.html#les-jeux-de-données",
    "title": "Données",
    "section": "Les jeux de données",
    "text": "Les jeux de données\n\n\n\nI. Afrique 2020 (UN - CEPII)\nPrésentationd es données, source, date… Blabla bzoehfzh zekfh fze fzefgze fizefz fzeif\n\n\nAffichage de données :\n\n\n\n\n\n\n\n\n\n\nDictionnaire des variables :\n\n\n\n\n\n\n\n\n\n\n\n\nII. Afrique 2020 (GADM)\nPrésentationd des données, source, date… Blabla bzoehfzh zekfh fze fzefgze fizefz fzeif\n\n\nAffichage de données :\n\n\n\n\n\n\n\n\n\n\nDictionnaire des variables :\n\n\n\n\n\n\n\n\n\n\n\n\nIII. Afrique 2018 (Elevation)\nhttps://energydata.info/dataset/benin-elevation-2008/resource/55593816-3ef3-45bf-b7f0-7aea16ddaf62 Présentationd des données, source, date… Blabla bzoehfzh zekfh fze fzefgze fizefz fzeif\n\n\nAffichage de données :\n\n\n\n\n\n\n\n\nCaractèristiques du Raster :\n\n\nclass       : SpatRaster \ndimensions  : 742, 369, 1  (nrow, ncol, nlyr)\nresolution  : 0.008339098, 0.008333169  (x, y)\nextent      : 0.774574, 3.851701, 6.23514, 12.41835  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource      : elevation.tif \nname        : elevation"
  },
  {
    "objectID": "modules/import.html",
    "href": "modules/import.html",
    "title": "Import",
    "section": "",
    "text": "Import et export de données\n\n\nLes différents types et formats de données pris en charge par R\n\n\n\n\n\n\n24 janv. 2023\n\n\nHugues pecout\n\n\n\n\n\n\n\n\nPackages de données et API\n\n\n\n\n\n\n\n\n\nWork in progress\n\n\n\n\n\n\n\n\nDonnées OpenStreetMap\n\n\n\n\n\n\n\n\n\nWork in progress\n\n\n\n\n\n\n\n\nInitiation au web scraping\n\n\n\n\n\n\n\n\n\nWork in progress\n\n\n\n\n\n\nAucun article correspondant\n\n\n\n\nRevenir à la page d’acceuil des modules"
  },
  {
    "objectID": "modules/geomatique.html",
    "href": "modules/geomatique.html",
    "title": "Géomatique",
    "section": "",
    "text": "Tous les modules\n\n\n\n\n\n\n   \n     \n     \n       Trier par\n       Ordre par défaut\n         \n          Titre\n        \n         \n          Auteur·rice\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nManipulation de données vectorielles\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nManipulation de données Raster\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nAucun article correspondant"
  },
  {
    "objectID": "modules/cartographie.html",
    "href": "modules/cartographie.html",
    "title": "Cartographie",
    "section": "",
    "text": "Tous les modules\n\n\n\n\n\n\n   \n     \n     \n       Trier par\n       Ordre par défaut\n         \n          Titre\n        \n         \n          Auteur·rice\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nCartographie statique\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nCartographie dynamqiue\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nAucun article correspondant"
  },
  {
    "objectID": "modules/statistique.html",
    "href": "modules/statistique.html",
    "title": "Statistique",
    "section": "",
    "text": "Trier par\n       Ordre par défaut\n         \n          Titre\n        \n         \n          Auteur·rice\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nStatistique descriptive univariée\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nStatistique descriptive bivariée\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nStatistique descriptive multivariée\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nAucun article correspondant"
  },
  {
    "objectID": "modules/manipulation.html",
    "href": "modules/manipulation.html",
    "title": "Manipulation",
    "section": "",
    "text": "Tous les modules\n\n\n\n\n\n\n   \n     \n     \n       Trier par\n       Ordre par défaut\n         \n          Titre\n        \n         \n          Auteur·rice\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nUtilisation du tidyverse\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nManipulation en R-base\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nUtilisation de data.table\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nAucun article correspondant"
  },
  {
    "objectID": "modules/graphique.html",
    "href": "modules/graphique.html",
    "title": "Graphique",
    "section": "",
    "text": "Tous les modules\n\n\n\n\n\n\n   \n     \n     \n       Trier par\n       Ordre par défaut\n         \n          Titre\n        \n         \n          Auteur·rice\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDivers package de représentation graphique\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nGraphique avec ggplot2\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nGraphique R-base\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nAucun article correspondant"
  },
  {
    "objectID": "modules/import/import.html",
    "href": "modules/import/import.html",
    "title": "Import et export de données",
    "section": "",
    "text": "De nombreuses de fonctions(primitives ou non) peuvent être utilisées pour importer et exporter des données de différents formats."
  },
  {
    "objectID": "modules/import/import.html#tableau-de-données",
    "href": "modules/import/import.html#tableau-de-données",
    "title": "Import et export de données",
    "section": "Tableau de données",
    "text": "Tableau de données\n\nFichier texte simple\nUn fichier texte simple (ou fichier texte brut) est un fichier dont le contenu représente uniquement une suite de caractères. Il peut s’ouvrir avec n’importe quel éditeur de texte et utilise nécessairement une forme particulière de codage des caractères.\nPlusieurs fonctions primitives permettent d’importer et d’exporter des fichiers texte simples, comme les fichiers csv, txt , tsv…\n\nImport\n\nread.delim() : fichiers délimités par un symbole quelconque et “.” en séparateur décimal\nread.delim2() : fichiers délimités par un symbole quelconque et “,” en séparateur décimal\nread.table() : pour des fichiers texte délimités par des espaces\n\nread.csv() : pour des fichiers texte délimités par des virgules (format csv)\nread.csv2() : pour des fichiers texte délimités par des points-virgules (format csv français)\n\nPour que l’import de données s’effectue correctement, il est parfois nécessaire de renseigner plusieurs arguments, comme par exemple :\nheader : valeur logique qui indique si la première ligne contient les noms des variables. sep = indique le caractère utilisé comme séparateur de champ (ex : “;”) encoding = Chaîne de caractère qui précise l’encodage utilisé pour le fichier (ex : “UTF-8”).\n\n\n\n\n\n\nImportant\n\n\n\nN’oubliez pas d’assigner le résultat dans un objet pour garder en mémoire vos données importées.\n\n\n\n# Exemple d'utilisation de read.table()\nmon_tableau  <- read.table(file = \"../data/afrika_don_meta.csv\", \n                           header = TRUE,\n                           sep= \";\",\n                           encoding = \"UTF-8\")\n\n\n# Le tableau importé est stocké dans un objet data.frame\nclass(mon_tableau)\n\n[1] \"data.frame\"\n\n\n\n\nExport\nDes fonctions primitives permettent également d’exporter votre tableau de donnée vers différents format texte simple\n\nwrite.table() : pour tous les types de formats texte simple (séparateur à renseigner)\nwrite.csv() : pour exporter en csv (séparateur virgule)\nwrite.csv2() : pour exporter en csv (séparateur points-virgules)\n\n\n# Exemple write.table()\nwrite.table(x = mon_tableau, \n            file = \"../data/tableau.txt\", \n            sep = \"\\t\", col.names = TRUE, \n            fileEncoding = \"UTF-8\")\n              \n# Exemple write.csv()\nwrite.csv(x = mon_tableau, file = \"../data/tableau.csv\")\n\n\n\n\n\n\nExcel\nIl est parfois nécessaire d’importer des tableaux de données stockées dans un format propriétaire, comme par exemple Excel (xls, xlsx) ou SAS. Plusieurs packages vous permettent d’importer ce genre de format, et même d’exporter vos données dans ce type de format.\n\nImport\nVous pouvez par exemple importer un fichier Excel avec le package readxl.\n\ninstall.packages(\"readxl\")\n\n\n\n\n\n\n\nImportant\n\n\n\nLe packages readxl fait partie de l’écosystème tidyverse (cf. module x). Pour cette raison, le tableau importé est mis en mémoire dans un objet tibble et non dataframe. Il s’agit de deux objets très semblables mais pas identiques. Pour convertir un tibble en dataframe, vous pouvez utiliser la fonction as.data.frame().\n\n\n\nlibrary(readxl)\nmon_tableau <- read_excel(path = \"../data/afrika_don.xls\", \n                          sheet = \"afrika_meta\", \n                          skip = 0,\n                          col_names = TRUE)\n\n# Le tableau importé est stocké dans un objet data.frame\nclass(mon_tableau)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n\nExport\nPour exporter un dataframe (ou tibble) dans un fichier au format Excel, vous pouvez utiliser le package openxlsx et sa fonction write.xlsx().\n\ninstall.packages(\"openxlsx\")\n\n\n\n\n\n\n\nImportant\n\n\n\nLe packages openxlsx permet uniquement de lire et écrire les fichiers Excel comportant l’extension .xlsx.\n\n\n\nlibrary(readxl)\nwrite.xlsx(x = mon_tableau, file = \"../data/afrika_don.xlsx\")\n\n\n\n\n\n\nSAS\nLe package haven permet de gérer des fichiers propriètaires de différents formats : SAS, SPSS, Stata, dbf…\n\ninstall.packages(\"haven\")\n\n\n\n\n\n\n\nImportant\n\n\n\nTout comme readxl, ce package fait partie de l’écosystème tidyverse (cf. module x). Le tableau importé est mis en mémoire dans un objet tibble et non dataframe. Vous pouvez utiliser la fonction as.data.frame() pour le convertir.\n\n\n\nImport\n\nlibrary(haven)\nmon_tableau  <- read_sas(data_file = \"../data/data_sas.sas7bdat\")\n\n\n\nExport\nLe package havenmet également une fonction à disposition qui permet d’exporter des données en format SAS (.sas7bdat).\n\nwrite_sas(data = mon_tableau, path = \"../data/mon_tableau_sas.sas7bdat\")\n\n\n\n\n\n\nSPSS\nVous pouvez utiliser le package haven qui permet la lecture et l’écriture de fichier de données SAS.\n\nlibrary(haven)\n\n\nImport\n\nmon_tableau  <- read_sav(file =  \"../data/data_spss.sav\")\n\n\n\nExport\nLe package havenmet également une fonction à disposition qui permet d’exporter des données en format SPSS (.sav).\n\nwrite_sav(data = mon_tableau, path =  \"../data/mon_tableau_spss.sav\")\n\n\n\n\n\n\nStata\nVous pouvez utiliser le package haven qui permet la lecture et l’écriture de fichier de données Stata.\n\nlibrary(haven)\n\n\nImport\n\nlibrary(haven)\nmon_tableau  <- read_stata(file =  \"../data/data_stata.dta\")\n\n\n\nExport\nLe package havenmet également une fonction à disposition qui permet d’exporter des données en format Stata (.dta).\n\nwrite_dta(data = mon_tableau, path =  \"../data/mon_tableau_stata.dta\")"
  },
  {
    "objectID": "modules/import/import.html#couche-géographique",
    "href": "modules/import/import.html#couche-géographique",
    "title": "Import et export de données",
    "section": "Couche géographique",
    "text": "Couche géographique\n\nVecteur\nLe package sf permet de lire les différents formats de couche géographique vectorielle (ESRI Shapefile, GeoJSON, Keyhole Markup Language, GeoPackage…). Pour cela, ce package interface avec la librairie système GDAL. Les SIG fonctionnent de la même façon !\n\n\n\n\n\n\nNote\n\n\n\nL’installation du package sf demande un prérequis. La librairie système GDAL doit être installée sur votre machine. Il est parfois nécessaire de la faire soi-même sur certains système d’exploitation comme GNU/Linux.\n\n\n\ninstall.packages(\"sf\")\n\n\nImport\n\nlibrary(sf)\nmap_africa <- st_read(\"../data/afrika_map.shp\",  quiet = TRUE)\n\nclass(map_africa)\n\n[1] \"sf\"         \"data.frame\"\n\n\n\n\n\n\n\n\nImportant\n\n\n\nUne couche géographique importée via la fonction st_read() du package sf est mise en mémoire dans un objet sf (simple feature). Il s’agit en quelque sorte d’un dataframe ou chaque individu est associé à une géométrie.\n\n\n\n\nExport\nLa fonction st_write() permet d’enregistrer un objet sf sur sa machine, dans le format que l’on souhaite.\n\n# Enregistrement en format ESRI Shapefile\nst_write(obj = map_africa, \n         dsn = \"../data/map_africa.shp\", \n         layer_options = \"ENCODING=UTF-8\")\n\n\n# Enregistrement en format GeoPackage\nst_write(obj = map_africa, \n         dsn = \"../data/map_africa.gpkg\", \n         layer = \"pays\")\n\n\n\n\n\n\nRaster\nLe package terra permet aussi de lire et d’écrire des données géographiques vectorielles (comme sf) mais sa valeur ajoutée se situe au niveau de la manipulation de données raster.\n\ninstall.packages(\"terra)\n\n\nImport\nPour importer des données Raster, vous pouvez utiliser la fonction rast().\n\n\n\n\n\n\nImportant\n\n\n\nUn Raster importé via la fonction rast() du package terra est mis en mémoire dans un objet SpatRaster.\n\n\n\nlibrary(terra)\nElevation_Benin <- rast(\"../data/elevation.tif\") \n\nElevation_Benin\n\nclass       : SpatRaster \ndimensions  : 742, 369, 1  (nrow, ncol, nlyr)\nresolution  : 0.008339098, 0.008333169  (x, y)\nextent      : 0.774574, 3.851701, 6.23514, 12.41835  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource      : elevation.tif \nname        : elevation \n\n\n\n\nExport\nLa fonction writeRaster() permet d’enregistrer un objet SpatRaster sur sa machine, dans le format que l’on souhaite.\n\nwriteRaster(x = Elevation_Benin, filename = \"../data/Benin_Elevation.tif\")"
  },
  {
    "objectID": "modules/import/import.html#image",
    "href": "modules/import/import.html#image",
    "title": "Import et export de données",
    "section": "Image",
    "text": "Image\n\nImport\nPour importer des images, le package pnget jpeg, pré-installé avec le language R vous permet d’importer des images.\n\nFormat PNG\n\nlibrary(png)\nmon_image_png <- readPNG(\"../img/map.png\")\n\n\n\nFormat JPEG\n\nlibrary(jpeg)\nmon_image_jpg <- readJPEG(\"../img/wip.jpg\")\n\n\n\n\nExport\nIl est également possible d’exporter les sorties graphiques en format image avec les fonctions primitives suivantes :\n\nbmp()\njpeg()\npng()\ntiff()\n\nCes fonction doivent être utilisées de la manière suivante (exemple avec le format png) :\n\n# Ouverture de la création de l'image\npng(filename = \"../img/mon_image.jpg\")\n\n# Création de la représentation graphique souhaitée\nplot(1:10)\n\n# Fermeture (enregistrement) de l'image png\ndev.off()\n\n\n\n\n\n\n\nImportant\n\n\n\nIl est important et obligatoire d’ajouter la fonction dev.off() qui permet de clôturer la représentation graphique et d’enregistrer l’image.\n\n\nIl est également possible d’exporter vos représentations graphiques dans un format vectoriel, qui permet leur retouche avec des logiciel de DAO (Inkscape, Adobe Illustrator…). Les fonction pour réaliser cela sont :\n\npdf()\nsvg()\n\nL’utilisation de ces fonctions primitives est similaire à l’export d’images matricielles :\n\n# Ouverture de la création de l'image\npdf(file = \"../img/mon_image.pdf\")\n\n# Création de la représentation graphique souhaitée\nplot(1:10)\n\n# Fermeture (enregistrement) du pdf\ndev.off()"
  },
  {
    "objectID": "modules/notebook.html",
    "href": "modules/notebook.html",
    "title": "Notebook",
    "section": "",
    "text": "Tous les modules\n\n\n\n\n\n\n   \n     \n     \n       Trier par\n       Ordre par défaut\n         \n          Titre\n        \n         \n          Auteur·rice\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nExemple Quarto\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nLa programmation lettrée\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nLes notebooks (exécutables)\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nAucun article correspondant"
  },
  {
    "objectID": "modules.html",
    "href": "modules.html",
    "title": "Modules thématiques",
    "section": "",
    "text": "Import\n\n\nImport, collecte (API) et export de données\n\n\n\n\n\n\n\n\n\n\n\n\n\nManipulation\n\n\nGestion & traitement de données\n\n\n\n\n\n\n\n\n\n\n\n\n\nStatistique\n\n\nStat. descriptive uni, bi et multivariée\n\n\n\n\n\n\n\n\n\n\n\n\n\nGraphique\n\n\nReprésentation graphique\n\n\n\n\n\n\n\n\n\n\n\n\n\nGéomatique\n\n\nTraitement données vecteur et raster\n\n\n\n\n\n\n\n\n\n\n\n\n\nCartographie\n\n\nCartographie thématique\n\n\n\n\n\n\n\n\n\n\n\n\n\nNotebook\n\n\nConstruction de document combinant du texte et du code\n\n\n\n\n\n\n\nAucun article correspondant"
  },
  {
    "objectID": "presentation.html",
    "href": "presentation.html",
    "title": "Introduction",
    "section": "",
    "text": "Les différents modules thématiques peuvent être utilisés indépendamment les uns des autres. Il est néanmoins nécessaire de connaître les bases du langage R (objets, opérateurs, fonctions…) pour comprendre les différents cours et exercices proposés.\nSi vous êtes débutant.e, plusieurs supports libres et gratuits d’initiation à R sont indiqués dans les ressources annexes. Vous pouvez également consulter ces deux supports de communication utilisés pour introduire au langage R :\n\n\n\n\n\nConsulter en plein écran\n\n\n\n\n\n\n\nConsulter en plein écran\n\n\n\n\n\n\nLes modules thématiques\nLe contenu de TIG’R est organisé en sept modules thématiques :\n\nImport de données (Import, collecte (API) et export de données)\nManipulation de données (gestion & traitement de données)\nStatistique descriptives (uni, bi et multivariée)\nReprésentation graphique (R-base & ggplot2)\nGéomatique (traitement des données vectorielles et raster)\nCartographie thématique (statique et interactive\nNotebook (Production de document combinant du texte et du code)\n\n\n\n\n\n\n\nNote\n\n\n\nChaque module comprend au moins un cours d’introduction et un exercice appliqué.\n\n\n\n\nLes données\nLes différents jeux de données utilisés dans les modules sont présentés et mis à disposition sur cette page.\n\n\nLes packages\nAfin de maximiser la reproductibilité des traitements présentés, les différents modules de formation tentent de minimiser les dépendances à des packages. De plus, les différents packages utilisés sont des références dans la communauté R et laisser présager une certaine stabilité du code présenté.\nLes packages utilisés dans les différents modules thématiques sont :\n\nreadxl\nopenxlsx\nhaven\ndplyr\nlubridate\nFactoMineR\nggplot2\nsf\nterra\nmapsf\nrmarkdown\nknitr\n\n\n# Liste de package à installer\npackages <- c(\"readxl\", \"openxlsx\", \"haven\",\n              \"dplyr\", \"lubridate\", \"stringr\",\n              \"ggplot2\",  \"FactoMineR\", \"sf\", \n              \"terra\", \"mapsf\", \"rmarkdown\", \"knitr\")\n\n\n# Détéction de package à installer\nmissing_packages <- packages [!(packages  %in% installed.packages()[,\"Package\"])]\n\n# Installation des packages manquants\nif(length(missing_packages)) install.packages(missing_packages)\n\n\n\nConditions d’utilisation\nLe contenu de ce site web (support de cours et exercice inclus) est soumis à la Licence ouverte V2.0 d’Etalab. Le « Réutilisateur » est libre de réutiliser l’ « Information » :\n\nde la reproduire, la copier,\n\nde l’adapter, la modifier, l’extraire et la transformer, pour créer des « Informations dérivées », des produits ou des services,\n\nde la communiquer, la diffuser, la redistribuer, la publier et la transmettre,\n\nde l’exploiter à titre commercial, par exemple en la combinant avec d’autres informations, ou en l’incluant dans son propre produit ou application.\n\nSous réserve de :\n\nmentionner la paternité de l’ « Information » : sa source (cf. citation et la date de dernière mise à jour de l’ « Information » réutilisée.\n\n\n\nCitation TIG’R\n\n\nPecout H., et Dansou J. 2023. « TIG’R :  Traitement de l’information géographique avec R ». 2023. https://ee2023.netlify.app/."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "TIG’R est une ressource d’apprentissage pour le traitement de l’information géographique avec R. Ce site a été crée dans le cadre de l’école thématique Méthodes et outils de sciences territoriales organisée par le Collègue Internationnal des Sciences Territoirales et qui s’est déroulée au à Ouidah (Bénin) en Mars 2023.\nCe site contient l’ensemble des supports de cours et exercices reproductibles utilisés pour les modules de formation à R. Ces modules couvrent succinctement l’ensemble de la chaîne de traitement de données géographiques avec R.\nCette ressource est soumise à la Licence ouverte V2.0 d’Etalab. N’hésitez pas à la réutiliser !"
  }
]